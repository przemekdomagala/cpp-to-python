program: include* statement*;
include: INCLUDE INCLUDELITERAL SEMICOLON;
statement: namespace | enum | variable | function | class | struct;
namespace: NAMESPACE ID LEFT_BRACKET /*placeholder*/ RIGHT_BRACKET SEMICOLON
enum: ENUM CLASS? ID LEFT BRACKET ((ID (ASSIGN INT_LITERAL)?) (COMMA ID (ASSIGN INT_LITERAL)?)*)?  RIGHT BRACKET SEMICOLON
const_variable: STATIC? CONST (UNSIGNED? CHAR ID (ASSIGN CHAR_LITERAL)? | UNSIGNED? SHORT ID (ASSIGN INT_LITERAL)? | UNSIGNED? LONG ID (ASSIGN INT_LITERAL)? | UNSIGNED? INT_TYPE ID (ASSIGN ANY_INT_LITERAL)? | 
FLOAT ID (ASSIGN FLOAT_LITERAL)?  | DOUBLE ID (ASSIGN DOUBLE_LITERAL)? | BOOL ID (ASSIGN BOOL_LITERAL)? | AUTO ID ASSIGN ANY_ITERAL) SEMICOLON
non_const_variable: STATIC? (UNSIGNED? CHAR ID (ASSIGN CHAR_LITERAL)? | UNSIGNED? SHORT ID (ASSIGN INT_LITERAL)? | UNSIGNED? LONG ID (ASSIGN INT_LITERAL)? | UNSIGNED? INT_TYPE ID (ASSIGN ANY_INT_LITERAL)? | 
FLOAT ID (ASSIGN FLOAT_LITERAL)?  | DOUBLE ID (ASSIGN DOUBLE_LITERAL)? | BOOL ID (ASSIGN BOOL_LITERAL)? | AUTO ID ASSIGN ANY_ITERAL) SEMICOLON
variable: const_variable | non_const_variable
class_name: ID
function: STATIC? CONST? (VOID | class_name | UNSIGNED? CHAR | UNSIGNED? SHORT | UNSIGNED? LONG | UNSIGNED? INT_TYPE | FLOAT | DOUBLE | BOOL) ID LEFT_PARENTHESIS (variable (COMMA variable)*)? RIGHT_PARENTHESIS LEFT_BRACKET function_scope RIGHT_BRACKET 
function_scope: /*placeholder*/
for_loop: FOR LEFT_PARENTHESIS non_const_variable SEMICOLON if_expression
SEMICOLON ID (INCREMENT | DECREMENT | ASSIGN_ADD | ASSIGN_SUBSTRACT | ASSIGN_MULTIPLY | ASSIGN_DIVIDE) LEFT_BRACKET
loop_scope RIGHT_BRACKET SEMICOLON
loop_scope: ((for_loop | while_loop | BREAK SEMICOLON | CONTINUE SEMICOLON | if_statement | variable SEMICOLON))*
while_loop: WHILE LEFT_PARENTHESIS LOG_NOT? (TRUE | FALSE | (ID (LESSER | LESSER_EQUAL | GREATER | GREATER_EQUAL | EQUAL | NONEQUAL) (ID | ANY_LITERAL)) 
((LOG_AND | LOG_OR) LOG_NOT? ID (TRUE | FALSE | LESSER | LESSER_EQUAL | GREATER | GREATER_EQUAL | EQUAL | NONEQUAL) (ID | ANY_LITERAL))*)
RIGHT_PARENTHESIS LEFT_BRACKET loop_scope RIGHT BRACKET
if_expression: LOG_NOT? ID (LESSER | LESSER_EQUAL | GREATER | GREATER_EQUAL | EQUAL | NONEQUAL) (ID | ANY_LITERAL) ((LOG_AND | LOG_OR) LOG_NOT? ID (LESSER | LESSER_EQUAL | GREATER | GREATER_EQUAL | EQUAL | NONEQUAL) (ID | ANY_LITERAL))*
if_statement: IF LEFT_PARENTHESIS if_expression RIGHT_PARENTHESIS LEFT_BRACKET
loop_scope RIGHT_BRACKET (ELSE IF LEFT_PARENTHESIS if_expression RIGHT_PARENTHESIS LEFT_BRACKET loop_scope RIGHT_BRACKET)* (ELSE LEFT_BRACKET loop_scope RIGHT_BRACKET)?
