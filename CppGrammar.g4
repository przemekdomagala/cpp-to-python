grammar Cpp
import cppTokens

program: include* statement*;
include: INCLUDE INCLUDELITERAL SEMICOLON;
statement: namespace | enum | variable | function | struct;
namespace: NAMESPACE ID LEFT_BRACKET Pfunction* variable* struct* enum* RIGHT_BRACKET SEMICOLON;
enum: ENUM CLASS? ID LEFT BRACKET ((ID (ASSIGN INT_LITERAL)?) (COMMA ID (ASSIGN INT_LITERAL)?)*)?  RIGHT BRACKET SEMICOLON;
struct: STRUCT ID LEFT_BRACKET (((PRIVATE | PUBLIC | PROTECTED) COLON)* (variable* function*))*  RIGHT_BRACKET;
variable: STATIC? CONST? (UNSIGNED? CHAR ID (ASSIGN CHAR_LITERAL)? | UNSIGNED? SHORT ID (ASSIGN INT_LITERAL)? | UNSIGNED? LONG ID (ASSIGN INT_LITERAL)? | UNSIGNED? INT_TYPE ID (ASSIGN ANY_INT_LITERAL)? | FLOAT ID (ASSIGN FLOAT_LITERAL)?  | DOUBLE ID (ASSIGN DOUBLE_LITERAL)? | BOOL ID (ASSIGN BOOL_LITERAL)? | AUTO ID ASSIGN ANY_ITERAL) SEMICOLON;
assign: ID ASSIGN (ID | ANY_LITERAL | function_call);
function: STATIC? CONST? (VOID | UNSIGNED? CHAR | UNSIGNED? SHORT | UNSIGNED? LONG | UNSIGNED? INT_TYPE | FLOAT | DOUBLE | BOOL) ID LEFT_PARENTHESIS (variable (COMMA variable)*)? RIGHT_PARENTHESIS LEFT_BRACKET function_scope RIGHT_BRACKET SEMICOLON; 
function_scope: (for_loop | while_loop | if_statement | function_call)*;
function_call: ID LEFT_PARENTHESIS (ID* ANY_LITERAL*)? RIGHT_PARENTHESIS;
for_loop: FOR LEFT_PARENTHESIS variable SEMICOLON if_expression SEMICOLON ID (INCREMENT | DECREMENT | ASSIGN_ADD | ASSIGN_SUBSTRACT | ASSIGN_MULTIPLY | ASSIGN_DIVIDE) LEFT_BRACKET loop_scope RIGHT_BRACKET SEMICOLON;
loop_scope: ((for_loop | while_loop | BREAK SEMICOLON | CONTINUE SEMICOLON | if_statement | variable | assign | function_call SEMICOLON))*;
while_loop: WHILE LEFT_PARENTHESIS LOG_NOT? (TRUE | FALSE | (ID (LESSER | LESSER_EQUAL | GREATER | GREATER_EQUAL | EQUAL | NONEQUAL) (ID | ANY_LITERAL)) ((LOG_AND | LOG_OR) LOG_NOT? ID (TRUE | FALSE | LESSER | LESSER_EQUAL | GREATER | GREATER_EQUAL | EQUAL | NONEQUAL) (ID | ANY_LITERAL))*) RIGHT_PARENTHESIS LEFT_BRACKET loop_scope RIGHT BRACKET;
if_expression: LOG_NOT? ID (LESSER | LESSER_EQUAL | GREATER | GREATER_EQUAL | EQUAL | NONEQUAL) (ID | ANY_LITERAL) ((LOG_AND | LOG_OR) LOG_NOT? ID (LESSER | LESSER_EQUAL | GREATER | GREATER_EQUAL | EQUAL | NONEQUAL) (ID | ANY_LITERAL))*;
if_statement: IF LEFT_PARENTHESIS if_expression RIGHT_PARENTHESIS LEFT_BRACKET loop_scope RIGHT_BRACKET (ELSE IF LEFT_PARENTHESIS if_expression RIGHT_PARENTHESIS LEFT_BRACKET loop_scope RIGHT_BRACKET)* (ELSE LEFT_BRACKET loop_scope RIGHT_BRACKET)?;
enum_namespace_call: ID COLON COLON ID SEMICOLON;
